const { EthWallet, CoinType } = require('../index');
const ConfigTest = require('./config/config.test.staging.testnet');
const InfinitoApi = require('node-infinito-api');
const Assert = require('assert');
const chai = require('chai');
chai.should();

const opts = {
  apiKey: ConfigTest.API_KEY,
  secret: ConfigTest.SECRECT,
  baseUrl: ConfigTest.BASE_URL,
  logLevel: ConfigTest.LOG_LEVEL,
  coinType: CoinType.ETH.symbol,
  isTestNet: true,
  privateKey: '0x7dcde67dd9e92f2e7e062e4ed4b2ec336cc4d68f44c2ee37014adad7dc84c9ee'
  // '0x77d6f0d8768942c098e664bb4e930c5019755b90d6b0fb2fb43450d6270efb3d'
  // '0x6426b293207e124d334c8cb44380a4999ecc900e'

};
var wallet = null;

describe('wallet.eth', async () => {

  beforeEach(async () => {
    let api = new InfinitoApi(opts);
    wallet = new EthWallet(opts);
    wallet.setApi(api);
    //console.log(wallet.Account);
  });

  describe('#getBalance()', async () => {
    it('Get balance', async () => {
      let result = await wallet.getBalance();
      console.log(result);
      Assert.ok(result.balance !== undefined, 'balance must be exist');
    });
  });

  describe('#getHistory()', async () => {
    it('Get history', async () => {
      let result = await wallet.getHistory(0, 10);
      console.log(result);
      Assert.ok(result.transactions !== undefined, 'history must be exist');
    });
  });

  describe('#getAddress()', () => {
    it('Get address', () => {
      let result = wallet.getAddress();
      Assert.ok(result !== undefined, 'result must be exist');
    });
  });

  describe('#getNonce()', async () => {
    it('Get nonce', async () => {
      let result = await wallet.getNonce();
      Assert.ok(result !== undefined, 'result must be exist');
    });
  });

  describe('#getTxCount()', async () => {
    it('Get TxCount', async () => {
      let result = await wallet.getTxCount();
      Assert.ok(result !== undefined, 'result must be exist');
    });
  });

  describe('#getTxAddress()', async () => {
    it('Get TxAddress', async () => {
      let result = await wallet.getTxAddress(0, 10);
      Assert.ok(result.transactions !== undefined, 'transactions must be exist');
    });
  });

  describe('#getInternalTxAddress()', async () => {
    it('Get InternalTxAddress', async () => {
      let result = await wallet.getInternalTxAddress(0, 10);
      Assert.ok(result.transactions !== undefined, 'transactions must be exist');
    });
  });

  describe('#getSmartContractInfo()', async () => {
    it('Get SmartContractInfo', async () => {
      let result = await wallet.getSmartContractInfo('0x9d539c8534c156d76828992fd55a16f79afa9a36');
      Assert.ok(result !== undefined, 'result must be exist');
    });
  });

  describe('#getContractBalance()', async () => {
    it('Get ContractHistory', async () => {
      let result = await wallet.getContractBalance('0x9d539c8534c156d76828992fd55a16f79afa9a36');
      Assert.ok(result.balance !== undefined, 'balance must be exist');
    });
  });

  describe('#getContractHistory()', async () => {
    it('Get ContractHistory', async () => {
      let result = await wallet.getContractHistory('0x9d539c8534c156d76828992fd55a16f79afa9a36', 0, 10);
      Assert.ok(result !== undefined, 'result must be exist');
    });
  });

  describe('#send()', async () => {
    it('Send', async () => {
      let result = await wallet.send({
        txParams: {
          to: '0xe0bcec523eb3661cfd8a349330f04955c9a2ed6c',
          amount: 12000000000,
          gasLimit: 300000,
          gasPrice: 40000000000
        },
        isBroadCast: true
      });
      console.log(result);
      Assert.ok(result.tx_id !== undefined, 'tx id must be exist');
    });
  });

  describe('#transfer()', async () => {

    it('transfer', async () => {
      // 0xad0c4aecee4761f82b8dd37431f57a41d95815ac
      // 0x9d539c8534c156d76828992fd55a16f79afa9a36
      let result = await wallet.transfer('0x7f2b6d0840dfd26c905cee6c6928e5f083d92ef8', '0x5119643291e7f15dad2294737da8434dd3414246', 1000);
      console.log('result transfer ETH: ' + JSON.stringify(result));
      Assert.ok(result.tx_id !== undefined, 'tx id must be exist');
    });
  });

  describe('#transferTo()', async () => {

    it('transferTo', async () => {
      let contractAddress = '0xa73a5f203bed1fbc45b67a5595db64c33dc3d0c9';
      let to = '0x41612dbfc63fcae859a9faa8e95bb58314a4bc7d';
      let amount = 10000;
      let txParams = {};
      txParams.fee = 50
      txParams.sc = {};
      txParams.sc.contractAddress = contractAddress;
      txParams.sc.nameFunc = 'transferTo';
      txParams.sc.typeParams = ['address', 'uint256'];
      txParams.sc.paramsFuncs = [to, amount];

      let rawTx = await wallet.createRawTx(txParams);
      console.log(rawTx);
      let result = await wallet.send({
        rawTx: rawTx,
        isBroadCast: true
      });
      console.log('transferTo', result);
      Assert.ok(result.tx_id !== undefined, 'tx id must be exist');
    });

    it('Get Contract Balance', async () => {
      let result = await wallet.getContractBalance('0x464e3e8c11082dc80507e11886e58afe65af4c4e');
      console.log('result', result);
      Assert.ok(result.balance !== undefined, 'balance must be exist');
    });
  });


  describe('#Exchange()', async () => {
    it('approve ERC20', async () => {
      let contractAddress = '0x10b306ab1662ab4e1de22d3b0436829e2575fb71';
      let amount = 100;
      let txParams = {};
      txParams.sc = {};
      txParams.sc.contractAddress = contractAddress;
      txParams.sc.nameFunc = 'approve';
      txParams.sc.typeParams = ['address', 'uint256'];
      txParams.sc.paramsFuncs = ['0x41612dbfc63fcae859a9faa8e95bb58314a4bc7d', amount];
      let rawTx = await wallet.createRawTx(txParams);
      console.log(rawTx);
      let result = await wallet.send({
        rawTx: rawTx,
        isBroadCast: true
      });
      console.log('approve', result);
      Assert.ok(result.tx_id !== undefined, 'tx id must be exist');
    });
    it('Exchange ERC20', async () => {
      let contractAddress = '0x41612dbfc63fcae859a9faa8e95bb58314a4bc7d';
      let amount = 20;
      let txParams = {};
      txParams.sc = {};
      txParams.sc.contractAddress = contractAddress;
      txParams.sc.nameFunc = 'exchange';
      txParams.sc.typeParams = ['address', 'address', 'uint'];
      txParams.sc.paramsFuncs = ['0x10b306ab1662ab4e1de22d3b0436829e2575fb71', '0xa73a5f203bed1fbc45b67a5595db64c33dc3d0c9', amount];
      let rawTx = await wallet.createRawTx(txParams);
      console.log(rawTx);
      let result = await wallet.send({
        rawTx: rawTx,
        isBroadCast: true
      });
      console.log('Exchange', result);
      Assert.ok(result.tx_id !== undefined, 'tx id must be exist');
    });
  });


  describe('#Exchange Token ERC223()', async () => {
    it('Exchange ERC223', async () => {
      let contractAddress = '0xda662df2d93d4ddfe55c34f57d0138f20bd64a19';
      let amount = 100;
      let txParams = {};
      txParams.sc = {};
      txParams.sc.contractAddress = contractAddress;
      txParams.sc.nameFunc = 'transfer';
      txParams.sc.typeParams = ['address', 'uint'];
      txParams.sc.paramsFuncs = ['0x295a0effccae91958ed7334653e8cf49ffd345e7', amount];
      let rawTx = await wallet.createRawTx(txParams);
      console.log(rawTx);
      let result = await wallet.send({
        rawTx: rawTx,
        isBroadCast: true
      });
      console.log('transfer', result);
      Assert.ok(result.tx_id !== undefined, 'tx id must be exist');
    });
  });
});